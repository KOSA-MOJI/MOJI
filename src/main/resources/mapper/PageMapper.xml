<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.moji.mapper.PageMapper">
    <resultMap id="PageResultMap" type="com.spring.moji.entity.Page">
        <id property="pageId" column="page_id"/>
        <result property="diaryId" column="page_diary_id"/>
        <result property="createdAt" column="page_created_at"/>
        <result property="weather" column="weather"/>
        <result property="content" column="content"/>
        <result property="publicStatus" column="public_status"/>
        <association property="template" javaType="com.spring.moji.entity.Template">
            <id property="templateId" column="template_id"/>
            <result property="templateImage" column="template_image"/>
            <result property="createdAt" column="template_created_at"/>
        </association>
        <collection property="locations" ofType="com.spring.moji.entity.Location">
            <id property="locationId" column="location_id"/>
            <result property="pageId" column="location_page_id"/>
            <result property="address" column="address"/>
            <result property="latitude" column="latitude"/>
            <result property="longitude" column="longitude"/>
            <result property="createdAt" column="location_created_at"/>
            <collection property="imageUrls" ofType="com.spring.moji.entity.ImageUrl">
                <id property="imageUrlId" column="image_url_id"/>
                <result property="locationId" column="image_location_id"/>
                <result property="mapImage" column="map_image"/>
                <result property="createdAt" column="image_url_created_at"/>
            </collection>
        </collection>
    </resultMap>

    <select id="findByDuration" parameterType="com.spring.moji.dto.request.PageRequestDTO" resultMap="PageResultMap">
        SELECT
            p.page_id,
            p.diary_id AS page_diary_id,
            p.created_at AS page_created_at,
            p.weather,
            p.content,
            p.public_status,
            t.template_id,
            t.template_image,
            t.created_at AS template_created_at,
            l.location_id,
            l.page_id AS location_page_id,
            l.address,
            l.latitude,
            l.longitude,
            l.created_at AS location_created_at,
            i.image_url_id,
            i.location_id AS image_location_id,
            i.map_image,
            i.created_at AS image_url_created_at
        FROM
            pages p
                LEFT JOIN templates t ON p.template_id = t.template_id
                LEFT JOIN locations l ON p.page_id = l.page_id
                LEFT JOIN image_urls i ON l.location_id = i.location_id
        WHERE
            p.diary_id = #{diaryId}
          AND p.created_at BETWEEN TRUNC(#{startDate}) AND TRUNC(#{endDate}) + INTERVAL '1' DAY - INTERVAL '1' SECOND
        ORDER BY
            p.created_at
    </select>

    <select id="findRecentPage" parameterType="com.spring.moji.dto.request.PageRequestDTO" resultType="com.spring.moji.entity.Page">
        select *
        from(
            select *
            from pages
            where 1=1
              and diary_id = #{diaryId}
            order by created_at desc
        )
        where rownum = 1
    </select>

    <delete id="deleteByPageId" parameterType="java.lang.Long">
        DELETE FROM pages WHERE page_Id = #{pageId}
    </delete>

    <insert id="insertPage" parameterType="com.spring.moji.dto.request.PageInsertRequestDTO" useGeneratedKeys="true" keyColumn="page_id" keyProperty="pageId">
        INSERT INTO pages (diary_id, created_at, weather, content, public_status, template_id)
        VALUES (#{diaryId}, sysdate, #{weather}, #{content}, #{publicStatus}, #{templateId})
    </insert>

  <resultMap id="CommunityPageResultMap" type="com.spring.moji.entity.Page">
    <id property="pageId" column="page_id"/>
    <result property="diaryId" column="page_diary_id"/>
    <result property="createdAt" column="page_created_at"/>
    <result property="weather" column="page_weather"/>
    <result property="content" column="page_content"/>
    <result property="publicStatus" column="public_status"/>
    <association property="template" javaType="com.spring.moji.entity.Template">
      <id property="templateId" column="template_id"/>
      <result property="templateImage" column="temp_image"/>
      <result property="createdAt" column="temp_created_at"/>
    </association>
    <collection property="locations" ofType="com.spring.moji.entity.Location">
      <id property="locationId" column="location_id"/>
      <result property="pageId" column="loc_page_id"/>
      <result property="address" column="loc_address"/>
      <result property="latitude" column="loc_latitude"/>
      <result property="longitude" column="loc_longitude"/>
      <result property="createdAt" column="loc_created_at"/>
      <collection property="imageUrls" ofType="com.spring.moji.entity.ImageUrl">
        <id property="imageUrlId" column="img_url_id"/>
        <result property="locationId" column="img_location_id"/>
        <result property="mapImage" column="img_map_image"/>
        <result property="createdAt" column="image_url_created_at"/>
      </collection>
    </collection>
  </resultMap>

  <select id="findPublicByDistance" parameterType="com.spring.moji.dto.request.CommunityRequestDTO"
    resultMap="CommunityPageResultMap">
    SELECT
    p.page_id,
    MAX(d.diary_id)         AS page_diary_id,
    MAX(p.created_at)       AS page_created_at,
    MAX(p.weather)          AS page_weather,
    MAX(DBMS_LOB.SUBSTR(p.content, 4000, 1)) AS page_content,
    MAX(p.public_status)    AS public_status,
    MAX(t.template_id)      AS template_id,
    MAX(t.template_image)   AS temp_image,
    MAX(t.created_at)       AS temp_created_at,
    MAX(l.location_id)      AS location_id,
    MAX(l.page_id)          AS loc_page_id,
    MAX(l.address)          AS loc_address,
    MAX(l.latitude)         AS loc_latitude,
    MAX(l.longitude)        AS loc_longitude,
    MAX(l.created_at)       AS loc_created_at,
    MAX(i.image_url_id)     AS img_url_id,
    MAX(i.location_id)      AS img_location_id,
    MAX(i.map_image)        AS img_map_image,
    MAX(i.created_at)       AS img_url_created_at
    FROM pages p
    LEFT JOIN locations l ON p.page_id = l.page_id
    LEFT JOIN image_urls i ON l.location_id = i.location_id
    LEFT JOIN templates t ON p.template_id = t.template_id
    LEFT JOIN diaries d ON p.diary_id = d.diary_id
    WHERE p.public_status = 'y'
    AND p.page_id IN (
    SELECT l2.page_id
    FROM locations l2
    WHERE l2.location_id = (
    SELECT MIN(l3.location_id)
    FROM locations l3
    WHERE l3.page_id = l2.page_id)
    AND (
    6371 * ACOS(
    COS(#{latitude} * 3.141592653589793 / 180) * COS(l2.latitude * 3.141592653589793 / 180) *
    COS(l2.longitude * 3.141592653589793 / 180 - #{longitude} * 3.141592653589793 / 180) +
    SIN(#{latitude} * 3.141592653589793 / 180) * SIN(l2.latitude * 3.141592653589793 / 180))
    ) <= #{radius}
    )
    GROUP BY p.page_id
    --      LIMIT #{offset}, #{limit}
  </select>

</mapper>